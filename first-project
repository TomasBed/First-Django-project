import socket
import threading

def handle_client(client_socket, client_address):
    print(f"Connection from {client_address} established.")

    while True:
        try:
            message = client_socket.recv(1024).decode("utf-8")
            if not message:
                print(f"Connection from {client_address} closed.")
                break
            print(f"Received from {client_address}: {message}")
            reply = input("Your reply: ")
            client_socket.send(reply.encode("utf-8"))
        except ConnectionResetError:
            print(f"Connection from {client_address} closed unexpectedly.")
            break

    client_socket.close()

def start_server(host, port):
    server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    server_socket.bind((host, port))
    server_socket.listen(1)
    print(f"Server listening on {host}:{port}")

    while True:
        client_socket, client_address = server_socket.accept()
        client_handler = threading.Thread(target=handle_client, args=(client_socket, client_address))
        client_handler.start()

if __name__ == "__main__":
    HOST = "127.0.0.1"  # localhost
    PORT = 12345  # Choose any available port

    start_server(HOST, PORT)


import socket

def start_client(host, port):
    client_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    client_socket.connect((host, port))

    while True:
        try:
            message = input("Your message: ")
            client_socket.send(message.encode("utf-8"))
            reply = client_socket.recv(1024).decode("utf-8")
            print(f"Received from server: {reply}")
        except ConnectionResetError:
            print("Server closed the connection unexpectedly.")
            break

    client_socket.close()

if __name__ == "__main__":
    HOST = "127.0.0.1"  # localhost
    PORT = 12345  # Same port as server

    start_client(HOST, PORT)
